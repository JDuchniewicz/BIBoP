diff '--color=auto' -ru /home/jduchniewicz/Projects/OpenSourceFixes/ArduinoMqttClient/src/MqttClient.cpp ArduinoMqttClient/src/MqttClient.cpp
--- /home/jduchniewicz/Projects/OpenSourceFixes/ArduinoMqttClient/src/MqttClient.cpp	2021-05-20 20:44:34.578816801 +0200
+++ ArduinoMqttClient/src/MqttClient.cpp	2021-05-21 09:49:14.526902464 +0200
@@ -19,7 +19,7 @@
 
 #include "MqttClient.h"
 
-// #define MQTT_CLIENT_DEBUG
+//#define MQTT_CLIENT_DEBUG
 
 #ifndef htons
   #ifdef __ARM__
@@ -29,12 +29,10 @@
   #endif
 #endif
 
-#ifndef TX_PAYLOAD_BUFFER_SIZE
-  #ifdef __AVR__
-    #define TX_PAYLOAD_BUFFER_SIZE 128
-  #else
-    #define TX_PAYLOAD_BUFFER_SIZE 256
-  #endif
+#ifdef __AVR__
+#define TX_PAYLOAD_BUFFER_SIZE 128
+#else
+#define TX_PAYLOAD_BUFFER_SIZE 2048 //TODO: maybe more
 #endif
 
 #define MQTT_CONNECT      1
@@ -104,7 +102,12 @@
   }
 }
 
-void MqttClient::onMessage(void(*callback)(int))
+void MqttClient::registerOwner(void* owner)
+{
+    _owner = owner;
+}
+
+void MqttClient::onMessage(void(*callback)(void*, int))
 {
   _onMessage = callback;
 }
@@ -204,8 +207,14 @@
 int MqttClient::endMessage()
 {
   if (!_txStreamPayload) {
+    //Serial.println("Before ending");
+    //Serial.print("TXPAYLOADBUFFERINDEX : ");
+    //Serial.println(_txPayloadBufferIndex);
     if (!publishHeader(_txPayloadBufferIndex) ||
-        (clientWrite(_txPayloadBuffer, _txPayloadBufferIndex) != _txPayloadBufferIndex)) {
+        (clientWrite(_txPayloadBuffer, _txPayloadBufferIndex) < _txPayloadBufferIndex)) {
+        //Serial.print("TXPAYLOADBUFFERINDEX : ");
+        //Serial.println(_txPayloadBufferIndex);
+        //Serial.println("STOP");
       stop();
 
       return 0;
@@ -240,12 +249,14 @@
 
     for (unsigned long start = millis(); ((millis() - start) < _connectionTimeout) && clientConnected();) {
       poll();
+      //Serial.println("POLLING");
 
       if (_returnCode != -1) {
         return (_returnCode == 0);
       }
     }
 
+    //Serial.println("END POLLING");
     return 0;
   }
 
@@ -439,9 +450,9 @@
         if ((b & 0x80) == 0) { // length done
           bool malformedResponse = false;
 
-          if (_rxType == MQTT_CONNACK || 
+          if (_rxType == MQTT_CONNACK ||
               _rxType == MQTT_PUBACK  ||
-              _rxType == MQTT_PUBREC  || 
+              _rxType == MQTT_PUBREC  ||
               _rxType == MQTT_PUBCOMP ||
               _rxType == MQTT_UNSUBACK) {
             malformedResponse = (_rxFlags != 0x00 || _rxLength != 2);
@@ -449,7 +460,7 @@
             malformedResponse = ((_rxFlags & 0x06) == 0x06);
           } else if (_rxType == MQTT_PUBREL) {
             malformedResponse = (_rxFlags != 0x02 || _rxLength != 2);
-          } else if (_rxType == MQTT_SUBACK) { 
+          } else if (_rxType == MQTT_SUBACK) {
             malformedResponse = (_rxFlags != 0x00 || _rxLength != 3);
           } else if (_rxType == MQTT_PINGRESP) {
             malformedResponse = (_rxFlags != 0x00 || _rxLength != 0);
@@ -522,7 +533,7 @@
         if (_rxMessageIndex == 2) {
           _rxMessageTopicLength = (_rxMessageBuffer[0] << 8) | _rxMessageBuffer[1];
           _rxLength -= 2;
-          
+
           _rxMessageTopic = "";
           _rxMessageTopic.reserve(_rxMessageTopicLength);
 
@@ -557,7 +568,7 @@
             _rxState = MQTT_CLIENT_RX_STATE_READ_PUBLISH_PAYLOAD;
 
             if (_onMessage) {
-              _onMessage(_rxLength);
+              _onMessage(_owner, _rxLength);
 
               if (_rxLength == 0) {
                 _rxState = MQTT_CLIENT_RX_STATE_READ_TYPE;
@@ -580,7 +591,7 @@
           _rxState = MQTT_CLIENT_RX_STATE_READ_PUBLISH_PAYLOAD;
 
           if (_onMessage) {
-            _onMessage(_rxLength);
+            _onMessage(_owner, _rxLength);
           }
 
           if (_rxLength == 0) {
@@ -705,7 +716,7 @@
 
       if (b == -1) {
         break;
-      } 
+      }
 
       result++;
       *buf++ = b;
@@ -1167,5 +1178,8 @@
   Serial.println();
 #endif
 
-  return _client->write(buf, size);
+  size_t written = _client->write(buf, size);
+  //Serial.print("Written to client ");
+  //Serial.println(written);
+  return written;
 }
diff '--color=auto' -ru /home/jduchniewicz/Projects/OpenSourceFixes/ArduinoMqttClient/src/MqttClient.h ArduinoMqttClient/src/MqttClient.h
--- /home/jduchniewicz/Projects/OpenSourceFixes/ArduinoMqttClient/src/MqttClient.h	2021-05-20 20:44:34.578816801 +0200
+++ ArduinoMqttClient/src/MqttClient.h	2021-05-22 12:31:06.483101061 +0200
@@ -42,7 +42,9 @@
   inline void setClient(Client& client) { _client = &client; }
 
 
-  void onMessage(void(*)(int));
+  // changed by me lol, hackish
+  void onMessage(void(*)(void*, int));
+  void registerOwner(void*);
 
   int parseMessage();
   String messageTopic() const;
@@ -133,7 +135,8 @@
 private:
   Client* _client;
 
-  void (*_onMessage)(int);
+  void (*_onMessage)(void*, int);
+  void* _owner; // changed by me (callback hacks)
 
   String _id;
   String _username;
